[{"content":"","date":null,"permalink":"/","section":"Jinzhang Hu","summary":"","title":"Jinzhang Hu"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"Markdown + Hugo + Github pages\n环境配置 #配置 Hugo ## 安装 Hugo（Mac） brew install hugo cd quickstart # 创建项目 hugo new site quickstart # 设置 Hugo 主题 git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml # 添加内容 hugo new content posts/my-first-post.md hugo server -D # 启动Hugo（开发模式） hugo server # 编译 hugo 上传到 Github Pages #上传前要首先创建一个名字为 \u0026lt;username\u0026gt;.github.io 的仓库\n# 进入public文件夹 cd public # 初始化git仓库 git init echo \u0026#34;.DS_Store\u0026#34; \u0026gt;\u0026gt; .gitignore # 连接到远程仓库 git remote add origin git@github.com:username/username.github.io.git # 提交并上传 git add . git commit -m \u0026#34;first commit\u0026#34; git push origin main 目录结构 #Hugo 项目的基本目录结构如下\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── congo 主题推荐 #Hugo 每个主题的使用方式都有所不同，这里我使用的是 Congo，这个主题支持 KaTeX 数学公式。\nCongo #安装 Congo ## 创建项目 hugo new site mysite cd mysite # 安装主题 git init git submodule add -b stable https://github.com/jpanther/congo.git themes/congo # 设置主题 echo \u0026#34;theme = \u0026#39;congo\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml # 复制配置文件 mkdir -p config/_default cp -r themes/congo/config/_default/* config/_default/ # 启动 hugo server -D ","date":"14 December 2023","permalink":"/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/","section":"Posts","summary":"Markdown + Hugo + Github pages","title":"使用 Hugo 搭建自己的个人主页"},{"content":"环境配置 #安装 Miniconda #https://docs.conda.io/projects/miniconda/en/latest/miniconda-install.html 默认安装选项可能不会配置环境变量，有时我们需要手动配置环境变量\n安装 Cargo #https://doc.rust-lang.org/cargo/getting-started/installation.html 开始使用 #配置完成后建议重启电脑以确保环境变量生效\n# 打开终端 Win+R \u0026gt; cmd # Windows（注意不要使用powershell，否则命令会有所不同） 应用控制台 \u0026gt; 终端 # MacOS # 创建conda环境（python版本不要太低即可） conda create -n my-conda-env python=3.12 # 激活conda环境 conda activate my-conda-env # 创建python项目 mkdir my-python-project cd my-python-project # 安装maturin（必须使用pip，conda装的包可能不完整） pip install maturin # 使用maturin创建rust项目 maturin init my-rust-project --bindings pyo3 # 编译rust项目并安装到conda环境内 maturin develop -r -m my-rust-project/Cargo.toml # 注意这里必须是release模式否则效率会很低 # 使用python调用rust代码 python import my-rust-project my-rust-project.sum_as_string(5, 20) 后续只需要在 src/lib.rs 里添加想要加速的函数即可。\n代码提示 #默认生成的库不包含任何代码提示，添加代码提示很简单，在rust项目根目录下添加一个 my-rust-project.pyi 文件即可，例如：\ndef get_sub_graphs(edges: list[list[int]]) -\u0026gt; list[list[int]]: ... 性能对比 #先写一个Python版本的 #创建 mian.py\ntouch main.py notepad main.py # Windows nano main.py # MacOS or Linux 编写一个寻找连通子图的函数\nfrom collections import defaultdict, deque def get_sub_graphs(edges: list[list[int]]): graph = defaultdict(set) for u, v in edges: graph[u].add(v) graph[v].add(u) visited = set() graphs = [] for node in graph: if node not in visited: sub_graph = [] queue = deque([node]) visited.add(node) while queue: cur = queue.popleft() sub_graph.append(cur) for neighbor in graph[cur]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graphs.append(sub_graph) graphs.sort(key=len, reverse=True) return graphs 代码的其他部分\nimport time import random def generate_edges(node_count: int, avg_edges_per_node: float) -\u0026gt; list[list[int]]: edges = set() total_edges = int(node_count * avg_edges_per_node // 2) while len(edges) \u0026lt; total_edges: a = random.randint(0, node_count - 1) b = random.randint(0, node_count - 1) if a != b and (a, b) not in edges and (b, a) not in edges: edges.add((a, b)) return list(edges) if __name__ == \u0026#39;__main__\u0026#39;: edges = generate_edges(1000000, 3) t1 = time.time() sub_graphs = get_sub_graphs(edges) d1 = time.time() - t1 print(f\u0026#34;Python version takes {d1:.4f}s\u0026#34;) 改写为 Rust 版本 #以下代码放在 my-rust-project/src/lib.rs 内\nuse pyo3::prelude::*; use std::collections::{HashSet, HashMap, VecDeque}; #[pyfunction] fn get_sub_graphs(edges: Vec\u0026lt;Vec\u0026lt;i32\u0026gt;\u0026gt;) -\u0026gt; Vec\u0026lt;Vec\u0026lt;i32\u0026gt;\u0026gt; { let mut graph: HashMap\u0026lt;i32, HashSet\u0026lt;i32\u0026gt;\u0026gt; = HashMap::new(); for edge in edges { graph.entry(edge[0]).or_insert_with(HashSet::new).insert(edge[1]); graph.entry(edge[1]).or_insert_with(HashSet::new).insert(edge[0]); } let mut visited = HashSet::new(); let mut graphs = Vec::new(); for \u0026amp;node in graph.keys() { if !visited.contains(\u0026amp;node) { visited.insert(node); let mut queue = VecDeque::new(); queue.push_back(node); let mut sub_graph = Vec::new(); while let Some(cur) = queue.pop_front() { sub_graph.push(cur); for \u0026amp;neighbor in \u0026amp;graph[\u0026amp;cur] { if visited.insert(neighbor) { queue.push_back(neighbor); } } } sub_graph.sort(); graphs.push(sub_graph); } } graphs.sort_by(|a, b| b.len().cmp(\u0026amp;a.len())); graphs } /// A Python module implemented in Rust. #[pymodule] fn my-rust-project(_py: Python, m: \u0026amp;PyModule) -\u0026gt; PyResult\u0026lt;()\u0026gt; { m.add_function(wrap_pyfunction!(get_sub_graphs, m)?)?; Ok(()) } 编译并安装\nmaturin develop -r -m my-rust-project/Cargo.toml # 注意这里必须是release模式否则效率会很低 用 Python 调用\nimport my-rust-project ... t2 = time.time() sub_graphs = my-rust-project.get_sub_graphs(edges) d2 = time.time() - t2 print(f\u0026#34;Rust version takes {d2:.4f}s, up to {d1/d2:.1f}X.\u0026#34;) 可以看到有非常显著的性能提升\n","date":"13 December 2023","permalink":"/posts/%E4%BD%BF%E7%94%A8rust%E5%8A%A0%E9%80%9Fpython/","section":"Posts","summary":"环境配置 #安装 Miniconda #https://docs.","title":"使用Rust加速Python"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]